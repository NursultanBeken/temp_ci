# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.

commands:
  destroy_environment:
    steps:
      - run:
          name: destroy cloduformation stack
          command: |
            aws cloudformation delete-stack --stack-name dev-${CIRCLE_WORKFLOW_ID}


# Orchestrate or schedule a set of jobs
jobs:  
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/my-app  
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation create-stack \
            --stack-name dev-${CIRCLE_WORKFLOW_ID} \
            --template-body file://cfn_template.yml  \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:
          name: Diags
          command: |
            pwd
            ls -la . ..
            printenv
          when: on_fail
  
  create_inventory:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/my-app
    steps: 
      - run: yum install -y tar gzip
      - run: echo [all] > ~/my-app/inventory.ini
      - run:
          name: get ec2 instance details
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text >> ~/my-app/inventory.ini   
      - persist_to_workspace:
          root: ~/my-app
          paths: inventory.ini
      - store_artifacts:
          path: inventory.ini
       
  configure_env:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b7:13:2c:60:53:82:85:78:ec:0b:61:ce:5b:92:d0:01"]
      - attach_workspace:
          at: ~/my-app
      - run: cat ~/my-app/inventory.ini    
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/my-app/inventory.ini main.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: ~/my-app
      - run:
          name: instal curl
          command: |
            apk --no-cache add curl
      - run:
          name: curl URL
          command: |
            echo 'export MY_ENV_VAR=$(cat ~/my-app/inventory.ini | head -2 | tail -1)' >> $BASH_ENV
            source $BASH_ENV 
            URL="http://${MY_ENV_VAR}:3000"
            if curl -s --head ${URL} 
            then
              echo "It worked!"
            else
              echo "It failed"
              return 1
            fi
      - destroy_environment:
          when: on_fail

workflows:
  # Name the workflow "welcome"
  my_workflow:
    # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      - create_inventory:
          requires: [create_infrastructure]
      - configure_env:
          requires: [create_inventory]
      - smoke_test:
          requires: [configure_env]

